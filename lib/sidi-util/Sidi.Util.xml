<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sidi.Util</name>
    </assembly>
    <members>
        <member name="T:Sidi.Cache.LruCache`2">
            <summary>
            Least Recently Used Cache.
            </summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:Sidi.Cache.LruCache`2.#ctor(System.Int32,System.Func{`0,`1})">
            <summary>
            
            </summary>
            <param name="maxCount">Maximal number of items the cache can hold.</param>
            <param name="provideValue">Delegate to create a cache item if it is not in the cache.</param>
        </member>
        <member name="M:Sidi.Cache.LruCache`2.Update(`0,`1)">
            <summary>
            Updates a cache entry without changing the least-recently-used position.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sidi.Cache.LruCache`2.ShrinkTo(System.Int32)">
            <summary>
            Removes cached items if there are more than newCount.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="P:Sidi.Cache.LruCache`2.Item(`0)">
            <summary>
            Indexer to get a cached item. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Cache.LruCacheBackground`2.Contains(`0)">
            <summary>
            Returns true if the item specified by key is in the cache. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:Sidi.Cache.LruCacheBackground`2.EntryUpdated">
            <summary>
            Fires when an entry in the cache was updated.
            </summary>
            Warning: this event will be fired by a background thread.
        </member>
        <member name="P:Sidi.Cache.LruCacheBackground`2.Item(`0)">
            <summary>
            Indexer to get a cached item. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Sidi.CommandLine.Action.UsageText">
            <summary>
            Formatted usage information with parameters
            </summary>
        </member>
        <member name="T:Sidi.CommandLine.PersistentAttribute">
            <summary>
            Properties marked with this attribute will be stored in the registry
            </summary>
        </member>
        <member name="T:Sidi.CommandLine.PasswordAttribute">
            <summary>
            Properties marked with this attribute will not be displayed to the user
            </summary>
        </member>
        <member name="M:Sidi.Net.HtmlGenerator.Write(System.IO.TextWriter,System.Func{System.Object})">
            <summary>
            Exception-safe way to render the html object to a TextWriter
            </summary>
            <param name="o"></param>
            <param name="htmlGenerator"></param>
        </member>
        <member name="M:Sidi.Extensions.IEnumerableExtensions.Counted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a counted (0-based) enumeration.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Extensions.IEnumerableExtensions.SafeSelect``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Like Select, but silently ignores exceptions in f
            </summary>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="x"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Extensions.IEnumerableExtensions.Best``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximum element as defined by f
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="S"></typeparam>
            <param name="x"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="F:Sidi.Forms.ChooseOneDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sidi.Forms.ChooseOneDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sidi.Forms.ChooseOneDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sidi.Forms.NativeMethods.CoTaskMemFree(System.IntPtr)">
            <summary>Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function.</summary>
            <param name="hMem">Pointer to the memory block to be freed.</param>
        </member>
        <member name="M:Sidi.Forms.NativeMethods.lstrcat(System.String,System.String)">
            <summary>The lstrcat function appends one string to another.</summary>
            <param name="lpString1">Pointer to a null-terminated string. The buffer must be large enough to contain both strings.</param>
            <param name="lpString2">Pointer to the null-terminated string to be appended to the string specified in the lpString1 parameter.</param>
            <returns>If the function succeeds, the return value is a pointer to the buffer.<br>If the function fails, the return value is IntPtr.Zero.</br></returns>
        </member>
        <member name="M:Sidi.Forms.NativeMethods.SHBrowseForFolder(Sidi.Forms.BROWSEINFO@)">
            <summary>Displays a dialog box that enables the user to select a shell folder.</summary>
            <param name="lpbi">Address of a BROWSEINFO structure that contains information used to display the dialog box.</param>
            <returns>Returns the address of an item identifier list that specifies the location of the selected folder relative to the root of the namespace. If the user chooses the Cancel button in the dialog box, the return value is IntPtr.Zero.</returns>
        </member>
        <member name="M:Sidi.Forms.NativeMethods.SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder)">
            <summary>Converts an item identifier list to a file system path.</summary>
            <param name="pidList">Address of an item identifier list that specifies a file or directory location relative to the root of the namespace (the desktop).</param>
            <param name="lpBuffer">Address of a buffer to receive the file system path. This buffer must be at least MAX_PATH characters in size.</param>
            <returns>Returns a nonzero value if successful, or zero otherwise.</returns>
        </member>
        <member name="F:Sidi.Forms.SelectObjectsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sidi.Forms.SelectObjectsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sidi.Forms.SelectObjectsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sidi.IMAP.IMailbox.GetByUid(System.UInt32)">
            <summary>
            Returns the message sequence number for a uid, or 0 if UID is not found
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.IO.Operation">
            <summary>
            File System Operations
            </summary>
        </member>
        <member name="M:Sidi.IO.Operation.Move(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            Moves files or directory trees. Falls back to copying if moving is not possible
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Sidi.IO.Operation.Link(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            Creates a hard link of a file or a directory tree containing hard links.
            Falls back to copying if hard linking is not possible.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Sidi.IO.Operation.Copy(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            Copies a file or directory tree.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Sidi.IO.Operation.DeleteEmptyDirectories(Sidi.IO.LPath)">
            <summary>
            Deletes directory tree and all subdirectories if they are empty
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Sidi.IO.Operation.Delete(Sidi.IO.LPath)">
            <summary>
            Deletes file or directory tree and all files and subdirectories below.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Sidi.IO.Operation.DeleteInternal(Sidi.IO.LPath)">
            <summary>
            Deletes file or directory tree and all files and subdirectories below.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Sidi.IO.Operation.EnsureParentDirectoryExists(Sidi.IO.LPath)">
            <summary>
            Ensures that the parent directory of path exists.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Sidi.IO.Operation.EnsureDirectoryExists(Sidi.IO.LPath)">
            <summary>
            Ensures that a directory exists at path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Sidi.IO.Operation.CanMove(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            true, if p1 and p2 are on the same file system and can be moved
            or hard-linked efficiently 
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.Operation.IncrementalCopy(Sidi.IO.LPath,Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            Copies from from to to. Tries to avoid making copies by 
            hard-linking existing files from existing to to.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="existing"></param>
        </member>
        <member name="P:Sidi.IO.Operation.Simulate">
            <summary>
            When true, file system is not modified, but would-be modifications are logged.
            </summary>
        </member>
        <member name="P:Sidi.IO.Operation.Overwrite">
            <summary>
            When true, overwrites existing files
            </summary>
        </member>
        <member name="P:Sidi.IO.Operation.Fast">
            <summary>
            If true, copying is skipped when length and last modified time of 
            source and target are identical
            </summary>
        </member>
        <member name="M:Sidi.IO.LDirectory.FindFileRaw(Sidi.IO.LPath)">
            <summary>
            Thin wrapper around FindFirstFile and FindNextFile. Also will return "." and ".."
            </summary>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.LDirectory.FindFile(Sidi.IO.LPath)">
            <summary>
            Enumerates found files. Make sure that the Enumerator is closed properly to free the Find handle.
            </summary>
            <param name="searchPath">File search path complete with wildcards, e.g. C:\temp\*.doc</param>
            <returns></returns>
        </member>
        <member name="F:Sidi.IO.Find.Roots">
            <summary>
            List of start paths for Depth() and Breath(). Multiple start roots are supported.
            </summary>
        </member>
        <member name="M:Sidi.IO.Find.Depth">
            <summary>
            Recurses all start roots depth-first
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.Find.Breadth">
            <summary>
            Recurses all start roots breadth-first
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.Find.OnlyFiles(Sidi.IO.LFileSystemInfo)">
            <summary>
            Follows files only
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.Find.NoDotNoHidden(Sidi.IO.LFileSystemInfo)">
            <summary>
            Only follows elements which do not start with . and are not hidden
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:Sidi.IO.Find.Output">
            <summary>
            Set this function to decide which files should be returned.
            </summary>
        </member>
        <member name="P:Sidi.IO.Find.Follow">
            <summary>
            Set this function to decide which directories should be followed.
            </summary>
        </member>
        <member name="P:Sidi.IO.Find.Visit">
            <summary>
            Set this function to see every file, not matter if output or not.
            </summary>
        </member>
        <member name="P:Sidi.IO.Find.Count">
            <summary>
            Counts the visited files
            </summary>
        </member>
        <member name="P:Sidi.IO.Find.Root">
            <summary>
            Sets a single root path. Roots will then have exactly one element.
            </summary>
        </member>
        <member name="T:Sidi.IO.FindConfig">
            <summary>
            Command line parser interface for Sidi.IO.Enum
            </summary>
        </member>
        <member name="M:Sidi.IO.FileType.#ctor(System.String[])">
            <summary>
            Specify all extensions you want to match
            </summary>
            <param name="extensions">list of extensions without "."</param>
        </member>
        <member name="M:Sidi.IO.LPath.UniqueFileName">
            <summary>
            Appends a number (.02) to the file name so that the returned path points to a file 
            in the same directory that does not exist yet
            Example: C:\temp\myimage.jpg => C:\temp\myimage.1.jpg
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.LPath.GetPathRoot">
            <summary>
            Throws an excpetion when !IsAbsolute
            </summary>
            <returns>Root of the file system, e.g. C: or \\server\share</returns>
        </member>
        <member name="M:Sidi.IO.LPath.ChangeExtension(System.String)">
            <summary>
            Replaces the file extension of a path. 
            </summary>
            <param name="newExtension">New extension (with or without dot)</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.LPath.GetRelative(Sidi.IO.LPath)">
            <summary>
            Returns this path written relative to basePath
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.LPath.Get(Sidi.IO.LPath)">
            <summary>
            Gets all files that match the wildcard searchPath
            </summary>
            <param name="searchPath">search path that can contain wild cards</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.LPath.JoinFileName(System.String[])">
            <summary>
            Joins parts with the extension separator (.)
            null parts will be ignored.
            </summary>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="P:Sidi.IO.LPath.IsRoot">
            <summary>
            Returns true if ParentDirectory would return null
            </summary>
        </member>
        <member name="P:Sidi.IO.LPath.ExtensionWithoutDot">
            <summary>
            returns the extension of the file name without the . 
            returns null if no extension exists
            example: c:\image.jpg => jpg
            </summary>
        </member>
        <member name="M:Sidi.IO.NativeMethods.GetForegroundWindow">
            <summary>The GetForegroundWindow function returns a handle to the foreground window.</summary>
        </member>
        <member name="F:Sidi.Net.Abnf.Match.Types">
            <summary>
            Used for Create
            </summary>
        </member>
        <member name="P:Sidi.Net.Abnf.Match.Item(System.String)">
            <summary>
            Returns the first child rule with name
            </summary>
            <param name="name"></param>
            <returns>null, if rule not present</returns>
        </member>
        <member name="M:Sidi.IO.Copy.CopyToDir(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="destinationDir"></param>
            <returns>The destination path of the file</returns>
        </member>
        <member name="M:Sidi.IO.Copy.CanSkipCopy(Sidi.IO.LPath,Sidi.IO.LPath)">
            <summary>
            Used by FastCopy to decide if a file must be copied or can be skipped
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.Copy.DeleteAllFilesIn(Sidi.IO.LPath)">
            <summary>
            Delete all files in directory dir. Does not recurse into sub directories.
            </summary>
            <param name="dir"></param>
        </member>
        <member name="T:Sidi.Forms.BROWSEINFO">
            <summary>Contains parameters for the SHBrowseForFolder function and receives information about the folder selected by the user.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.hWndOwner">
            <summary>Handle to the owner window for the dialog box.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.pIDLRoot">
            <summary>Address of an ITEMIDLIST structure specifying the location of the root folder from which to browse. Only the specified folder and its subfolders appear in the dialog box. This member can be IntPtr.Zero; in that case, the namespace root (the desktop folder) is used.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.pszDisplayName">
            <summary>Address of a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH bytes.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.lpszTitle">
            <summary>Address of a null-terminated string that is displayed above the tree view control in the dialog box. This string can be used to specify instructions to the user.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.ulFlags">
            <summary>Flags specifying the options for the dialog box.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.lpfnCallback">
            <summary>Address of an application-defined function that the dialog box calls when an event occurs. This member can be IntPtr.Zero.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.lParam">
            <summary>Application-defined value that the dialog box passes to the callback function, if one is specified.</summary>
        </member>
        <member name="F:Sidi.Forms.BROWSEINFO.iImage">
            <summary>Variable to receive the image associated with the selected folder. The image is specified as an index to the system image list.</summary>
        </member>
        <member name="T:Sidi.Forms.BrowseForTypes">
            <summary>Specifies the type of items to browse for.</summary>
        </member>
        <member name="F:Sidi.Forms.BrowseForTypes.Computers">
            <summary>Browse for computers.</summary>
        </member>
        <member name="F:Sidi.Forms.BrowseForTypes.Directories">
            <summary>Browse for directories.</summary>
        </member>
        <member name="F:Sidi.Forms.BrowseForTypes.FilesAndDirectories">
            <summary>Browse for files and directories.</summary>
            <remarks>Only works on shell version 4.71 and higher!</remarks>
        </member>
        <member name="F:Sidi.Forms.BrowseForTypes.FileSystemAncestors">
            <summary>Browse for file system ancestors (an ancestor is a subfolder that is beneath the root folder in the namespace hierarchy.).</summary>
        </member>
        <member name="T:Sidi.Forms.DirectoryDialog">
            <summary>Implements the SHBrowseForFolder function to show a common folder dialog.</summary>
        </member>
        <member name="F:Sidi.Forms.DirectoryDialog.MAX_PATH">
            <summary>Specifies the maximum number of characters in a pathname.</summary>
            <remarks>The value of this integer is 260.</remarks>
        </member>
        <member name="M:Sidi.Forms.DirectoryDialog.#ctor">
            <summary>Initializes a new DirectoryDialog instance.</summary>
        </member>
        <member name="M:Sidi.Forms.DirectoryDialog.RunDialog(System.IntPtr)">
            <summary>Shows the common folder dialog.</summary>
            <param name="hWndOwner">The owner of the folder dialog.</param>
            <returns>True when successful, false otherwise.</returns>
        </member>
        <member name="M:Sidi.Forms.DirectoryDialog.ShowDialog">
            <summary>Shows the folder dialog.</summary>
            <returns>DialogResult.OK when successful, DialogResult.Cancel otherwise.</returns>
        </member>
        <member name="M:Sidi.Forms.DirectoryDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>Shows the folder dialog.</summary>
            <param name="owner">The owner of the folder dialog.</param>
            <returns>DialogResult.OK when successful, DialogResult.Cancel otherwise.</returns>
        </member>
        <member name="F:Sidi.Forms.DirectoryDialog.m_BrowseFor">
            <summary>Holds a BrowseForTypes value that indicates what type of items to browse for.</summary>
        </member>
        <member name="F:Sidi.Forms.DirectoryDialog.m_Title">
            <summary>Holds the string with the title of the directory dialog.</summary>
        </member>
        <member name="F:Sidi.Forms.DirectoryDialog.m_Selected">
            <summary>The a string with the selected item.</summary>
        </member>
        <member name="P:Sidi.Forms.DirectoryDialog.Title">
            <summary>Gets or sets the title of the dialog.</summary>
            <value>A String representing the title of the dialog.</value>
            <exceptions cref="T:System.ArgumentNullException">The specified value is null (VB.NET: Nothing)</exceptions>
        </member>
        <member name="P:Sidi.Forms.DirectoryDialog.Selected">
            <summary>Gets the selected item.</summary>
            <value>A String representing the selected item.</value>
        </member>
        <member name="P:Sidi.Forms.DirectoryDialog.BrowseFor">
            <summary>Gets or sets the type of items to browse for.</summary>
            <value>One of the BrowseForTypes values.</value>
        </member>
        <member name="T:Sidi.Forms.MouseWheelSupport">
            <summary>
            Mouse Wheel Support.
            </summary>
        </member>
        <member name="F:Sidi.Forms.TextPrompt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sidi.Forms.TextPrompt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sidi.Forms.TextPrompt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Sidi.Util.Dump.MaxLevel">
            <summary>
            Maximal tree levels to be output
            </summary>
        </member>
        <member name="F:Sidi.Util.Dump.Indent">
            <summary>
            Prefix for indentation
            </summary>
        </member>
        <member name="T:Sidi.Util.StringEncrypt">
            <summary>
            encrypt and decrypt strings
            </summary>
        </member>
        <member name="M:Sidi.Util.StringEncrypt.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypts the string.
            </summary>
            <param name="clearText">The clear text.</param>
            <param name="Key">The key.</param>
            <param name="IV">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.StringEncrypt.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the string.
            </summary>
            <param name="clearText">The clear text.</param>
            <param name="Password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.StringEncrypt.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypts the string.
            </summary>
            <param name="cipherData">The cipher data.</param>
            <param name="Key">The key.</param>
            <param name="IV">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.StringEncrypt.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the string.
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="Password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.GraMath.CalcTransform(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Calculates the 2D transform to required convert rectangle src to rectangle dst
            </summary>
            <param name="src"></param>
            <param name="dst"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.GraMath.Center(System.Drawing.Rectangle)">
            <summary>
            Returns the center point of the rectangle.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.GraMath.Area(System.Drawing.Size)">
            <summary>
            returns the area for a size.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Util.GraMath.Center(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers rectangle r in rectangle and returns it.
            </summary>
            <param name="r"></param>
            <param name="at"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.Collections.LruCache`2">
            <summary>
            Least Recently Used Cache.
            </summary>
            <typeparam name="Key"></typeparam>
            <typeparam name="Value"></typeparam>
        </member>
        <member name="M:Sidi.Collections.LruCache`2.#ctor(System.Int32,Sidi.Collections.LruCache{`0,`1}.ProvideValue)">
            <summary>
            
            </summary>
            <param name="maxCount">Maximal number of items the cache can hold.</param>
            <param name="provideValue">Delegate to create a cache item if it is not in the cache.</param>
        </member>
        <member name="M:Sidi.Collections.LruCache`2.Update(`0,`1)">
            <summary>
            Updates a cache entry without changing the least-recently-used position.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sidi.Collections.LruCache`2.ShrinkTo(System.Int32)">
            <summary>
            Removes cached items if there are more than newCount.
            </summary>
            <param name="newCount"></param>
        </member>
        <member name="P:Sidi.Collections.LruCache`2.Item(`0)">
            <summary>
            Indexer to get a cached item. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.Collections.LruCache`2.ProvideValue">
            <summary>
            Delegate to create a cache item if it is not in the cache.
            </summary>
            <param name="key"></param>
            <returns>The newly created item.</returns>
        </member>
        <member name="M:Sidi.Collections.LruCacheBackground`2.Contains(`0)">
            <summary>
            Returns true if the item specified by key is in the cache. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:Sidi.Collections.LruCacheBackground`2.EntryUpdated">
            <summary>
            Fires when an entry in the cache was updated.
            </summary>
            Warning: this event will be fired by a background thread.
        </member>
        <member name="P:Sidi.Collections.LruCacheBackground`2.Item(`0)">
            <summary>
            Indexer to get a cached item. 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.CommandLine.TypeExtensions">
            <summary>
            Extension methods for Type
            </summary>
        </member>
        <member name="T:Sidi.CommandLine.Parser">
            <summary>
            Command line parser
            </summary>
            Helps to transform your class into a command line application with attributes.
            You only have to decorate your class with [Usage("...")] attributes, and Parser will 
            do the rest for you.
            
            Supported argument types are: bool,int, double, string, DirectoryInfo,
            FileSystemInfo, DateTime, TimeSpan and enums.
            You can use System.ComponentModel.CategoryAttribute to sort your actions and
            options into categories to make the usage message more readable.
        </member>
        <member name="M:Sidi.CommandLine.Parser.Check(System.Collections.Generic.IList{System.String})">
            <summary>
            Checks if the arguments are syntactically correct, but does not execute 
            anything. Throws the same exceptions as Parse when the arguments contain
            an error.
            </summary>
            <param name="a_args"></param>
        </member>
        <member name="M:Sidi.CommandLine.Parser.CheckSingleCommand(System.Collections.Generic.IList{System.String})">
            <summary>
            Checks if the arguments are syntactically correct, but does not execute 
            anything. Throws the same exceptions as Parse when the arguments contain
            an error.
            </summary>
            <param name="a_args"></param>
        </member>
        <member name="F:Sidi.CommandLine.Parser.preferencesPassword">
            <summary>
            It is not safe to use an internal password
            to store secrets in the registry, but better than nothing, however.
            </summary>
        </member>
        <member name="M:Sidi.CommandLine.Parser.GetPreferencesKey(Sidi.CommandLine.Option)">
            <summary>
            The registry key for an option is HKEY_CURRENT_USER\Software\[Company]\[Product]\[Full application class name]
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.CommandLine.Parser.DetectOptionPrefix(System.String@)">
            <summary>
            Detects and removes an option prefix from name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.CommandLine.Parser.LookupParserItem(System.String)">
            <summary>
            
            </summary>
            <param name="name">Specifies the parser item. Abbreviations allowed.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.CommandLine.Parser.GetAction(System.String)">
            <summary>
            deprecated
            </summary>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.CommandLine.Parser.ShowUsage">
            <summary>
            Writes usage information to the console.
            </summary>
        </member>
        <member name="M:Sidi.CommandLine.Parser.WriteUsage(System.IO.TextWriter)">
            <summary>
            Writes usage information to a TextWriter
            </summary>
            <param name="w">Receives the usage message.</param>
        </member>
        <member name="P:Sidi.CommandLine.Parser.PreferencesKey">
            <summary>
            Registry key for LoadPreferences and StorePreferences. 
            Default is HKEY_CURRENT_USER\Software\[your company]\[your product]
            </summary>
        </member>
        <member name="P:Sidi.CommandLine.Parser.Items">
            <summary>
            All available actions and options
            </summary>
        </member>
        <member name="P:Sidi.CommandLine.Parser.Actions">
            <summary>
            All actions
            </summary>
        </member>
        <member name="P:Sidi.CommandLine.Parser.Options">
            <summary>
            All options
            </summary>
        </member>
        <member name="P:Sidi.CommandLine.Parser.SubCommands">
            <summary>
            All options
            </summary>
        </member>
        <member name="M:Sidi.IO.FileUtil.SearchUp(Sidi.IO.LPath,System.String)">
            <summary>
            Searches fileName in directory first, then in all parent directories
            </summary>
            <param name="directory"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.IO.FileUtil.FilesAreEqual(System.String,System.String)">
            <summary>
            Compares two files bytewise
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.Select(System.String)">
            <summary>
            Selects a subset of items from the collection
            </summary>
            <param name="query">Part of an SQL statement after the "where" keyword.</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.Query(System.String)">
            <summary>
            Selects a subset of items from the collection.
            </summary>
            <param name="query">complete SQL select statement returning row ids</param>
            <returns>List of found items</returns>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.Find(System.String)">
            <summary>
            Finds an element that matches the condition
            </summary>
            <param name="query">part of SQL statement after the "where" keyword</param>
            <returns>Found object</returns>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.DoSelect(System.String)">
            <summary>
            Executes a SQL select and returns a list of objects
            </summary>
            <param name="query">part of SQL select statement after "where"</param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.Flush">
            <summary>
            Flushes the internal cache
            </summary>
        </member>
        <member name="M:Sidi.Persistence.Collection`1.Sql(System.String)">
            <summary>
            Executes an SQL statement.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="T:Sidi.Net.Pop3.Server">
            <summary>
            Implements a POP3 server as specified in http://tools.ietf.org/html/rfc1939
            </summary>
        </member>
        <member name="M:Sidi.Extensions.StringExtensions.ToString(System.Action{System.IO.TextWriter})">
            <summary>
            Converts a action that writes to a TextWriter to a string
            </summary>
            <param name="generator">Function that writes something to a TextWriter</param>
            <returns>Output string</returns>
        </member>
        <member name="M:Sidi.Extensions.StringExtensions.F(System.String,System.Object[])">
            <summary>
            A shorter way to write String.Format
            </summary>
            <param name="formatString"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Extensions.StringExtensions.Printable(System.String)">
            <summary>
            Replace the annoying "beep" unicode character
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sidi.Extensions.StringExtensions.SafeToString(System.Object)">
            <summary>
            Converts to a string, even if ToString() raises an exception or x is null.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.Util.Tokenizer">
            <summary>
            Simple text tokenizer. Separates strings at whitespace. Understands # comments, and quoted strings.
            </summary>
        </member>
        <member name="M:Sidi.Util.UnixTime.#ctor">
            <summary>
            Private constructor to prevent the class from being instantiated.
            </summary>
        </member>
        <member name="F:Sidi.Util.UpdateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sidi.Util.UpdateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sidi.Util.UpdateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sidi.Visualization.ColorScale">
            <summary>
            Interpolates a scalar to a color
            </summary>
        </member>
        <member name="P:Sidi.Visualization.Tree.ChildSize">
            <summary>
            calculates the sum of the sizes of all children
            </summary>
        </member>
        <member name="M:Sidi.Visualization.TreeMap.Track(System.Windows.Forms.PaintEventArgs,Sidi.Visualization.Layout)">
            <summary>
            Outlines specified layout item and all its parents
            </summary>
            <param name="e"></param>
            <param name="tree"></param>
        </member>
        <member name="M:Sidi.Visualization.LabelPainter.DrawLabel(System.Drawing.Graphics,System.String,Sidi.Visualization.Bounds)">
            <summary>
            Draws a label in world rectangle rect
            </summary>
            <param name="graphics">Assumes that graphics.Transform is identity</param>
            <param name="text"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:Sidi.Visualization.LayoutManager">
            <summary>
            http://www.win.tue.nl/~vanwijk/ctm.pdf
            </summary>
        </member>
        <member name="M:Sidi.Visualization.LayoutManager.Update(Sidi.Visualization.Layout)">
            <summary>
            Recursively updates a layout tree.
            </summary>
            <param name="layout">Layout tree node to be updated. Rectangle and TreeNode must be initialized.</param>
            <returns></returns>
        </member>
    </members>
</doc>
